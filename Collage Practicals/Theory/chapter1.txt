(1.)	Features Of Java :-

    •	Java is a class-based, object-oriented programming language . 
    •	Java is a popular programming language used for many different things because it has lots of useful features.

      Here are some key features
    1.	Class and object
    2.	Encapsulation 
    3.	Inheritance 
    4.	Polymorphism
    5.	Abstraction
    6.	Interfaces
    7.	Packages
    8.	 Exception handling

    •	Class and Object :-
      It serves as a blueprint for creating objects
      A class is declared using the class keyword followed by the class name.
      an object is an instance of a class
      It represents a real-world entity with properties and behaviours defined by its class



    •	Encapsulation :-

      Encapsulation is a key principle of OOP.
      Java facilitates it through classes.
      In Java, you can control access to class members (attributes and methods) using access modifiers like public, private, and protected, thereby enforcing encapsulation.

    •	Inheritance :-

      Inheritance is another important concept in Java that allows one class (subclass) to inherit properties and behaviors from another class (superclass).

      Java supports single inheritance (i.e., a subclass can inherit from only one superclass) but allows for the creation of inheritance chains through multilevel inheritance.

    •	Polymorphism:-

      Polymorphism, which means "many forms"

      It allows objects of different classes to be treated as objects of a common superclass through method overriding and method overloading.

      Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its superclass.

      Method overloading involves defining multiple methods with the same name but different parameter lists within a class.

    * Abstraction:
     
      Abstraction in programming means hiding the complicated parts of a system and showing only the important stuff. or data hiding

    * Interfaces : 
    
      interfaces act as agreements for classes to follow, detailing what methods they must have without giving the actual code for those methods.

    * Packages:
    
      Packages in Java serve as containers for organizing and managing related classes and interfaces. 

    * Exception Handling:

      Exception handling in Java is a mechanism that allows developers to gracefully handle errors and unexpected situations that may occur during the execution of a program.   


(2.) What is ByteCode? Justify why java is platform Independant

   ByteCode:-  
      
      Byte Code can be defined as an intermediate code generated by the compiler after the compilation of JAVA Program. 

      This intermediate code makes Java a platform-independent language.

      flow: Program->compiler->ByteCode->JVM->Machine code

      Compiler converts the source code or the Java program into the Byte Code(or machine code),and secondly, the Interpreter executes the byte code on the system. The Interpreter can also be called JVM(Java Virtual Machine).

      The byte code is the common piece between the compiler and the Interpreter .

    why java is platform Independant:-

      Java is platform-independent primarily due to its compilation process and the architecture of the JVM (Java Virtual Machine).

      Here's why Java achieves platform independence:

        Compilation to Bytecode:

          When you compile a Java source file (.java), the Java compiler translates it into bytecode (.class) instead of native machine code.
          Bytecode is a set of instructions understood by the Java Virtual Machine (JVM), rather than being specific to any particular hardware or operating system.
          
        Execution by the JVM:

          Java bytecode is executed by the JVM, which acts as an abstraction layer between the Java code and the underlying platform (hardware and operating system).
          The JVM interprets bytecode instructions and translates them into native machine code .

        Write Once, Run Anywhere (WORA):

          Java's "write once, run anywhere" (WORA) principle means you can create code once and use it on any device or system without needing to adjust it.
          Since Java bytecode is platform-independent, you can write Java code on one platform (e.g., Windows) and execute it on another platform (e.g., Linux) without recompilation, as long as a JVM is available for the target platform.
        
        Platform-Specific JVM Implementations:

          While Java bytecode remains platform-independent, the JVM itself is platform-dependent.
          Each platform (e.g., Windows, Linux, macOS) has its own JVM implementation optimized for that platform, allowing Java applications to run efficiently while maintaining portability.
        
        Consistent Runtime Environment:

          The JVM provides a consistent runtime environment for Java bytecode, regardless of the underlying hardware or operating system.
        
        Security and Sandboxing:

          Java's platform independence enhances security by enabling the use of sandboxing techniques.


(3.)  control Structure in JAVA :-

    Control structures and selection statements in Java allow developers to control the flow of execution in a program based on certain conditions. 
    Control structures and selection statements in Java provide flexibility and control over the flow of execution in a program, enabling developers to write complex and efficient code.
    
    
    Here's the main control structures and selection statements in Java:

    1. if Statement:
      The if statement allows you to execute a block of code only if a specified condition is true.
      Optionally, you can include else if and else clauses to handle alternative conditions.
      java
      Copy code
      int x = 10;
      if (x > 0) {
          System.out.println("Positive number");
      } else if (x < 0) {
          System.out.println("Negative number");
      } else {
          System.out.println("Zero");
      }
    
    2. switch Statement:
      The switch statement allows you to select one of several code blocks to execute based on the value of an expression.
      It's often used when you have multiple conditions to check against the same variable.
      java
      Copy code
      int day = 3;
      switch (day) {
          case 1:
              System.out.println("Monday");
              break;
          case 2:
              System.out.println("Tuesday");
              break;
          // Other cases
          default:
              System.out.println("Invalid day");
      }

    3. Ternary Operator:
        The ternary operator (? :) provides a compact way to write conditional expressions with a single line of code.
        It evaluates a boolean expression and returns one of two values depending on whether the expression is true or false.
        java
        Copy code
        int x = 10;
        String result = (x > 0) ? "Positive" : "Negative";
        System.out.println(result);
    
    4.Loops:
        Loops are control structures that allow you to repeatedly execute a block of code as long as a specified condition is true.

        Java supports several types of loops, including for, while, and do-while loops.

        // for loop
        for (int i = 0; i < 5; i++) {
            System.out.println(i);
        }

        // while loop
        int i = 0;
        while (i < 5) {
            System.out.println(i);
            i++;
        }

        // do-while loop
        int i = 0;
        do {
            System.out.println(i);
            i++;
        } while (i < 5);

    5.Break and Continue:
        The break statement terminates the loop or switch statement it is within.
        The continue statement skips the rest of the current iteration of a loop and continues with the next iteration.
        java
        Copy code
        for (int i = 0; i < 10; i++) {
            if (i == 5) {
                break; // Terminate the loop if i equals 5
            }
            System.out.println(i);
        }


(4.)  oop vs pop 


                    oop                                                             pop

    1.  Object oriented programming                   1.  Procedure Oriented programming
    2.  Object oriented                               2.  Structure Oriented 
    3.  Program is divided into objects               3.  Program is divided into functions
    4.  Bottom-up approach                            4.  Top-down approach
    5.  Inheritance property is used                  5.  Inheritance property is not used
    6.  It uses access specifie                       6.  It doesn't use access specifie
    7.  Encapsulation is used to hide the data        7.  No data hiding
    8.  Concept of virtual function.                  8.  No virtual function.
    9.  Adding new data and functions is easy         9.  Expanding new data and functions is not easy.
    10. The existing code can be reused.              10. No code reusability.
    11. use for solving big problems.                 11. Not suitable for solving big problems.
    12. c++,java                                      12. c, Pascal